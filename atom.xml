<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://i-frush.github.io</id>
    <title>i-frush&apos;s blog</title>
    <updated>2022-02-26T13:28:10.122Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://i-frush.github.io"/>
    <link rel="self" href="https://i-frush.github.io/atom.xml"/>
    <logo>https://i-frush.github.io/images/avatar.png</logo>
    <icon>https://i-frush.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, i-frush&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[bash学习 : 重定向，管道和命令替换]]></title>
        <id>https://i-frush.github.io/post/linux-xue-xi-chong-ding-xiang-guan-dao-he-ming-ling-ti-huan/</id>
        <link href="https://i-frush.github.io/post/linux-xue-xi-chong-ding-xiang-guan-dao-he-ming-ling-ti-huan/">
        </link>
        <updated>2022-02-24T04:03:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="b起因b"><b>起因</b></h2>
<p>我对shell管道符 | 的认知就是将前一个命令的输出作为后一个命令的待输入参数，于是有:</p>
<p>查询特定docker容器id的命令：</p>
<pre><code class="language-shell">[root@iZfc383jmumlgoZ ~]# docker ps -aqf &quot;name=iifrush1&quot;
4fdba602edab
</code></pre>
 </br>
 <p>查询指定id容器的终端输出的命令：
<pre><code class="language-shell">[root@iZfc383jmumlgoZ ~]# docker logs 4fdba602edab
iifrush
iifrush
iifrush
iifrush
iifrush
iifrush
</code></pre>
 </br>
<p>但是将他们用 | 连接，后面的命令却接收不到参数:</p></p>
<pre><code class="language-shell">[root@iZfc383jmumlgoZ ~]# docker ps -aqf &quot;name=iifrush1&quot; | docker logs
&quot;docker logs&quot; requires exactly 1 argument.
See 'docker logs --help'.
</code></pre>
 </br>
<p>现在我知道了docker logs命令可以直接以container name作为参数 (<code>docker logs iifrush1</code> ) ，所以上述指令完全没必要使用管道符.</br></p>
<p>但我想稍微探究一下为什么会出现这种奇妙的错误，以及shell，pipe，stdin到底是什么东西.</p>
<h2 id="bshell-和-bashb"><b>shell 和 bash</b></h2>
<p>首先，我们的命令一定是不符合某种<b>*规则*</b>才致使了错误，这种规则是谁规定的规则呢？自然是命令运行的载体的规则，所以我们先来了解一下linux命令运行的载体。</p>
<p>资料 :</p>
<p><a href="https://linux.vbird.org/linux_basic/centos7/0320bash.php#bash">鸟哥的linux私房菜 第十章</a></p>
<p>shell的原意为壳，此处的含义即是kernel的外壳. 它是操作者和linux核心的介面，广义的讲，所有充当这种介面的应用程序都可称为shell，但通常我们只用shell来表示使用<b>命令行</b>界面来进行这种交互的程序.</p>
<br/>
<p>linux系统通常有不止一种shell程序(详见/etc/shells中的记录)，而bash(GNU Bourne-Again Shell)是linux预设的shell.以bash作为默认是因为其有许多方便的特性，诸如:
<ul>
<li>history命令暂存</li>
<li>命令补全</li>
<li>alias命令别名</li>
<li>支持shell scripts</li>
<li>job control工作控制</li>
</ul>
<p>等等<br/><br>
我们所讨论的linux命令即是作为bash这个程序的输入来与kernel进行交互的,我们达不到预期是因为不符合bash的规则.</p></p>
<h2 id="bterminal和stdinouterrb"><b>terminal和stdin/out/err</b></h2>
<p>资料 :</p>
<p><a href="https://unix.stackexchange.com/questions/140522/why-do-some-commands-not-read-from-their-standard-input">Why do some commands not read from their standard input?</a><br>
<a href="https://askubuntu.com/questions/1266163/command-execution-with-arguments-have-no-relation-with-stdin">stdin and command line arguments</a><br>
<a href="https://superuser.com/questions/880344/what-is-the-difference-between-terminal-and-bash#">What is the difference between terminal and bash? </a></p>
<p>在了解bash的管道使用规则之前，我们要先了解一些前置知识.</p>
<h3 id="什么是terminal">什么是terminal</h3>
<p>有些人会认为terminal就是shell，这种说法是不严谨的. <br/>
terminal最初是指terminal device，它是用户交互的硬件设备. 而现在的terminal则是指terminal emulator,它是终端设备的一种模拟程序,用作用户和shell的一个交互界面.<br/>
所以你在使用shell时所直接看到的那个与你交互的界面实际上是terminal程序，它将shell的返回结果展示给你.<br/>
但terminal确实和shell是形影不离的，所以在某些模糊的描述中他们指代同一种东西.</p>
<h3 id="stdinstdoutstderr">stdin，stdout，stderr</h3>
<p>这三个都是标准流的一种. 流实际上是一种数据I/O的模型，它用来描述数据在两个端点间传输的情况. 而stdin，stdout，stderr的两端中，都有一端是与terminal相连的，所以程序就可以借助这三个标准流来（通过terminal）与用户进行交互. <br/>
但以上只是抽象的概念，更为关键的问题是：它们在linux中是怎么实现的.</p>
<h3 id="作为文件的std">作为文件的std</h3>
<p>linux的一个核心设计理念是"Everything is a file."，stdin/out/err在linux中也是以文件的形式进行操作的.<br/>
更具体地说，它们对应于/dev/std{in,out,err}这三个文件，各个进程使用这三个控制流的时候只要对这三个文件进行读写就行 .<br/>
等等，这么说的话...
</p>
<br/>
<ul>
<li>
<p>Q : <p>难道所有的进程都共用一个stdin/otu/err吗？</p></p>
</li>
<li>
<p>A: <p>当然不是的，实际上我们查看这三个文件，会发现它们实际上是<b><em>符号链接</em></b>.</p>
</li>
</ul>
<pre><code class="language-shell">[root@iZfc383jmumlgoZ /]# ls -l /dev/std*
lrwxrwxrwx 1 root root 15 Feb 24 00:30 /dev/stderr -&gt; /proc/self/fd/2
lrwxrwxrwx 1 root root 15 Feb 24 00:30 /dev/stdin -&gt; /proc/self/fd/0
lrwxrwxrwx 1 root root 15 Feb 24 00:30 /dev/stdout -&gt; /proc/self/fd/1
</code></pre>
<p>再进一步的话：</p>
<pre><code class="language-shell">[root@iZfc383jmumlgoZ /]# ls -l /proc/self/fd/{0,1,2}
lrwx------ 1 root root 64 Feb 25 19:38 /proc/self/fd/0 -&gt; /dev/pts/0
lrwx------ 1 root root 64 Feb 25 19:38 /proc/self/fd/1 -&gt; /dev/pts/0
lrwx------ 1 root root 64 Feb 25 19:38 /proc/self/fd/2 -&gt; /dev/pts/0
</code></pre>
<br/>
这里的pts意指"Pseudo-terminal slave"，<font color="b3424a">至于slave和master(/dev/ptmx)的关系，我还没有搞清楚</font>，但我们可以知道该该文件即与上面提到的terminal emulator交互的接口 .这样我们就搞清楚标准流是怎么与终端产生联系的了.
<br/>
至于多个进程使用不同的stdin的精妙之处，则来自于/proc/self这个路径，实际上这个路径也是个link，当不同的进程访问此链接时，就会访问这个进程本身的/proc/pid目录 .而后面的/fd/{0,1,2}中的0，1，2即该进程拥有的stdin/out/err对应的文件描述符 .
<br/>
<p>这样在不同进程访问/dev/std*时，实际上就会访问的是自己所拥有的那个标准流文件 .</p>
</p>
<h3 id="两种参数获取方式">两种参数获取方式</h3>
<p>我们现在知道进程可以通过/dev/stdin来与终端进行交互，这样用户就有给命令提供输入数据的方法了.<br/>
但是，一个程序除了从stdin，还可以从<b>*命令行参数*</b>来获取自己想要的数据，我们以一个C程序为例子对此进行说明 .
<pre><code class="language-c">#include&lt;stdio.h&gt;
int main(int argc, char *argv[]) {
    int tmp;
    if(argc==2){
        printf(&quot;Welcome %s\n&quot;, argv[1]);
        scanf(&quot;%d&quot; ,&amp;tmp);
        printf(&quot;ifrush -- %d&quot; ,tmp);
    }
    else {
        fprintf(stderr, &quot;Usage : %s &lt;name&gt;\n&quot;, argv[0]);
        return 1;
    }
    return 0;
}
</code></pre>
<p>比如以上程序中的 <code>argv[]</code>即是命令行参数数组，而<code>scanf(&quot;%d&quot; ,&amp;tmp);</code>则会从stdin中获取输入 .<br>
程序设计者通常根据应用场景来选择不同的方式 ，如果一个命令同时支持两者，一种常见的方式是: 先尝试从参数数组获得数据，如果无法获得，再从stdin获取(这也是后面pipe可以实现的一种条件).</p>
</p>
<h3 id="一点引申-linux命令的设计原则">一点引申 : linux命令的设计原则</h3>
<p>现在我们知道了bash命令支持进程以两种不同的方式获取数据, 但为什么要使用这两种不同的方式呢?
其中有许多不同的原因，这里介绍一种比较有趣的.<br/>
在linux设计过程中，有一种程序被称作<b>filter</b>,这些程序不关心输入数据的语义，只关心输入数据的格式 .它们通常从stdin读取数据，将数据进行某种格式转换，再将数据从stdout输出，比如cat，sort，grep等命令 .这些命令往往被使用于pipe .<br/>
与之相对应的，另一种程序的功能与输入数据的<b>语义</b>密切相关，比如kill，ls，rm，这些命令在设计时往往不支持从stdin获取数据 .<br/>
以上只是从linux命令的设计规范来进行解释，具体使用哪种方式取决于程序设计人员，所以我们想知道一个命令是否支持stdin进行参数输入的最好的方法是<b>阅读该命令的文档</b> .
</p>
<h3 id="一个奇妙的疑问与bash命令解析">一个奇妙的疑问与bash命令解析</h3>
<p>我在解决这个问题时曾产生过一个奇妙的疑问，现在通过以上的知识就可以进行解答 :<br/>
<ul>
<li>
<p>Q : 等等，刚才说stdin的一端通常是与键盘相连的，那么我们所有的命令参数不都是使用键盘输入的吗? 这样说不是应该所有的指令的参数都是从stdin输入吗?</p>
</li>
<li>
<p>A : 解答这个问题的关键是：所有的进程都有一个属于自己的stdin，而shell也是一个进程，它也有自己的stdin .事实上我们所输入的内容刚开始都输入到了bash的stdin里面 .<br/><br>
然后bash在根据命令解析的结果运行程序，并将参数或作为命令行参数传递给进程，或直接传送到进程的stdin里面 .<font color="b3424a">这里bash解析的具体过程我还不是很清楚( 源码实在看不懂 )，之后有时间再探究这个问题 .</font><br/></p>
</li>
</ul>
</p>
<h2 id="b管道重定向b"><b>管道，重定向</b></h2>
<p>现在我们来看bash里面的重定向和管道的功能就很容易理解了 : 这两个功能就是对每个进程都有的stdin, stdout ,stderr这三个符号链接的充分利用 .<br/>
它通过修改进程的这三个符号链接的指向地址，结合bash的命令解析规则，来进行命令输出和输入的改变   . <br/>
比如 :
<pre><code class="language-shell">[root@iZfc383jmumlgoZ ~]# echo &quot;iifrush&quot; | echo

</code></pre>
<p>pipe将第一个echo进程的stdout指向第二个echo进程的stdin，但是echo是从命令行参数获取数据的，所以就算第二个echo进程获取到了stdin的数据也不会输出.<br/><br>
此外，这种依靠符号链接的重定向方式还会造成一些奇怪的bug，比如 :<br>
<a href="https://segmentfault.com/a/1190000018650276?utm_source=sf-similar-article">linux重定向标准输入后，再重新打开标准输入为什么会失效？</a></p>
</p>
<h2 id="b总结b"><b>总结</b></h2>
<p>现在我们对于最开始的问题就有比较系统的解决方案 :<br/>
<ol>
<li>
<p>查阅命令文档，通常会说明命令是否使用stdin获取数据<br/>以<code>echo</code>为例, <a href="https://man7.org/linux/man-pages/man1/echo.1p.html">echo 官方文档</a>  中明确说明了echo不支持stdin输入</p>
</li>
<li>
<p>这时候可以通过<code>read</code>将管道中的内容存入变量，再将其作为命令行参数</p>
</li>
</ol>
<pre><code class="language-shell">[root@iZfc383jmumlgoZ ~]# echo &quot;iifrush hello&quot; | { read var1 var2; echo &quot;$var1 $var2&quot;; }
iifrush hello
</code></pre>
<p>另一种比较常用的做法是使用命令替换，它的原理是bash子进程，这里不展开介绍 :</p>
<pre><code class="language-bash">[root@iZfc383jmumlgoZ ~]# echo $(echo &quot;iifrush hello&quot;)
iifrush hello
</code></pre>
<br/>
至此，我们的问题有了一个基本的解答，但是还有一些地方不甚明晰，这些地方之后有时间的话在进行学习 .
</p>
<p>在查阅资料的过程中，我看到了许多人对这个问题的解答，虽然他们的回答都是<b>*正确的*</b>且有的是优雅的，但是回答的角度不尽相同，我的疑问并没有因此消失. 这也是我们为什么要自己将问题的解答写下来的原因，我们的疑问需要的不仅是一个正确的答案，更应该是一个让我们洞明的答案.<br/></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[集句]]></title>
        <id>https://i-frush.github.io/post/ji-ju/</id>
        <link href="https://i-frush.github.io/post/ji-ju/">
        </link>
        <updated>2022-02-23T05:49:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1一个关于晚安布布的漫画评论">１．一个关于＂晚安布布＂的漫画评论</h2>
<p><b>出自 :</b><br>
<a href="https://book.douban.com/review/9137693/">“神经质”漫画家浅野一二0的集大成之作——《晚安布布》全解析</a>　 第七小节</p>
<blockquote>
<p>　　田中爱子，曾在第一卷里就用她所特有的可怖让布布陷入绝望。她曾经三次改变了布布的人生，第一次是布布没有遵守去鹿儿岛的约定，陷入了绝对的愧疚与自我封闭之中。第二次是多年后再遇见，把准备装作小拓，轻松的不做自己的布布一下子拉回到了现实。第三次就是结尾。</p>
<p>　 　可以说田中爱子毫无疑问改变了布布的整个人生，她的恐怖、病态和脆弱让人感到可畏。她和布布的爱情成为了《晚安布布》中最有魅力的谜团之一。</p>
</blockquote>
<p><b>分析 :</b></p>
<p>　　“可怖”一词具有陌生感，而且十分确切地点出了爱子的人物特性。这个词与漫画中爱子脆弱，无害的形象之间的反差也存在着张力。同样的，“恐怖、病态和脆弱”，“可畏”用的也十分恰当。 </p>
<p>　　“最有魅力的谜团”这种表述方法我也很喜欢，“魅力”与上文中的“可怖”也存在着张力。</p>
<p>　　此外不太重要的一点是：此段用“田中爱子”来称呼这一人物，而文章中其它部分则使用的是“爱子”这一称谓。也许是作者无意为之，但我感觉在总结的部分使用人物的全名会给读者一种客观的感觉（具体解析的部分使用普通的称呼则凸显了总结部分的客观感）。</p>
</br>
<h2 id="2光明王罹得悟道的片段">2．《光明王》，罹得悟道的片段</h2>
<p><b>出自：</b><br>
<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E6%98%8E%E7%8E%8B">《光明王》</a>  第三章</p>
<blockquote>
<p><p>　　&quot;Illustrious One,&quot; he said to him one day, &quot;my life was empty until you revealed to me the True Path. When you received your enlightenment, before you began your teaching, was it like a rush of fire and the roaring of water and you everywhere and a part of everything—the clouds and the trees ,the animals in the forest, all people, the snow on the mountaintop and the bones in the field?&quot;<br>
&quot;Yes,&quot; said Tathagatha.　</p></p>
</blockquote>
<blockquote>
<p>　　“世尊，”一天，他对佛陀说，“在你教给我真如之道前，我的生命全是空虚。在你开始教导他人之前，当你觉悟的时候，是否感到自己像燃烧的火焰、怒吼的河水，感到自己无处不在，变成了万有的一部分——云和树、动物和森林、每个人、山顶的积雪和原野上的枯骨？”</br>　　“是的。”如来道。</p>
</blockquote>
<p><b>分析:</b></p>
<p>　　细看来也没什么，就是一个对于悟道的描述，之前我记得是"愤怒如火焰，平静如河水"，有点反差的感觉，但好像是记错了。</p>
<p>　　西方小说里似乎因为佛教"轮回"的教义，喜欢把佛教的这种悟道描述为"与万物融为一体"的感觉？像黑塞《悉达多》里面主角跟随沙门修行的片段：</p>
<blockquote>
<p>　　一只苍鹭飞过竹林，悉达多就把那苍鹭摄入自己的灵魂，于是他变成了一只苍鹭，飞过树林和山岳，食鱼度日，熬受苍鹭的饥饿，使用苍鹭的语言，又像苍鹭一样死亡。</br>　　一只死豺躺在沙岸上，于是悉达多的灵魂就钻进了它的尸体，变成了一只死豺。它躺在岸上，肿胀、发臭、腐烂，被鬛狗撕开，被兀鹰啄食，最终剩下一具骷髅，化作尘土，飘散在空中。</p>
</blockquote>
<p>　　《钢之炼金术师》里面主角悟道时的"all in one"也有相似的感觉，但是那是理性上认识到"自己和万物处于同等地位没有什么特别的"。而这些佛教的悟道则更偏向于感性的一种体验，悟道意味着和万物通感为一。</br>
(补充资料 : 泛神论相关)</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生的技术与死的思想]]></title>
        <id>https://i-frush.github.io/post/the-live-of-tech/</id>
        <link href="https://i-frush.github.io/post/the-live-of-tech/">
        </link>
        <updated>2022-02-21T08:04:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="a-namematerial-资料a"><a name="material"> 资料</a></h2>
<p> 一些伦理学读物（未读）</br></p>
<p>加缪《西西弗神话》以及系列导读（未读）</br></p>
<h2 id="思考">思考</h2>
<h3 id="关于技术的印象">关于技术的印象</h3>
<p>（资料：<a href="#material">伦理&amp;技术哲学</a>）</p>
<p>无关词典里的定义，这里阐述的只是我自己的感觉。</p>
<p>技术就是完成一件事情的具体方法。 </br>
技术的目的只有一个，就是完成它的目标，其他衍生出来的种种对于技术来说都是无关紧要的。譬如，你想把一个20kg的物体搬到3楼，只要你通过某种方式完成了这个目标，这种方式就是一种技术；相反，只要你没有完成目标，就算你完成了部分目标或者获得了一些其他的收获，你所用地方式（对于你的目标而言）不是一种技术。</p>
<p>从这个角度来看，“目标”是技术的核心之一，目标的的选取是十分重要的。</p>
<p>技术的另一个关键的特征是“具体”。一个技术最好是能够形成描述具体的文档。就算其精妙之处难以用语言来描述，也应该确保同一个人在重复完成同样的目标时他的方式是相同的。也就是说，他在这个过程中可以清晰地意识到自己下一步要进行什么动作，而不是依靠“未知”。</p>
</br>
<p>一些技术的例子：<ul>
<li>如何使用旧电脑搭建一台自己的服务器</li>
<li>如果在篆刻时刻出竖直的线条</li>
<li>《刃牙》里面经常把格斗招式称为“技术”而与“力量”相对应</li>
<li>如何在可接受的时间内求出某一区间里互质对的个数</li>
<li>如何在聊天出现不和谐的迹象时避免冷场</li>
<li>游戏里面通过一系列动作而提高自己战胜对手的几率</li>
</ul></p>
</br>
<p>而我对技术有“生”的感觉，应该就是基于这些思考。从目标来看，一个技术的目标可能并不单一，但所有技术的都有有一个共同的目标:技术使用者的生活<font color="b3424a">(驳1 : 紫砂的技术)</font>。从“具体”这一特性来看，技术的使用者会时刻关注技术的种种细节，这会是我想起生活的繁复、多元、不纯净。</p>
<h4 id="b关于自杀的技术b"><b>关于自杀的技术</b></h4>
<p>（资料：<a href="#material">存在主义相关读物</a>）</p>
<p>Q：面向"自杀"的技术也包含有"生存"吗？</p>
<p>A："自杀"或者"死亡"在我的认识里是更本质的问题，关于这些问题的思考我确实还不甚明晰。我追问“技术”或者其他的话题的终极目标都是为了解决死亡，所以只有在我解决够足够的问题后才能较好地回答这个问题。</br>
但是在我的感觉中，就算是自杀的技术也一样是富含有生存的气息的，这很难描述。就像一个人在系即将拴住自己的脖子的绳结时，这个动作依然富含着生存气息，直到他完成了所有前置动作，进行"死亡"这最后一个动作之后，这些生存的气息才消散。</p>
</br>
<h3 id="关于思考的印象">关于思考的印象</h3>
<p>思考是一个很有意思的东西，我没法给出它的定义。我觉得任何描述它的文字都有循环论证之嫌，它也是一种比较接近本质的东西，就像笛卡尔人尽皆知的那句话“我思故我在”。</p>
<p>思考通常也是有“目标”的，但我觉得目标对技术比对死亡更加重要。思考自身是漫无目的的(或者说他的目的是唯一而纯净的)，我们是<b>尽量</b>用“目标”来约束我们的思考，但尽管如此，它无目标的那一部分会在不经意间泄露出来。我们常将一个问题的答案作为思考的“目标”，但完全不知道思考会不会抵达那里。思考就像一匹疯癫的马，我们只能使用问题的答案作为目标来引诱它，通常目标越明确对于它的诱惑力就越大。</p>
<p>而就是“目的”的缺少使得思考是不明确的。对比于一个人执行技术时可以预测下一步的动作，思考的下一步往往难以预测。就像数学家在依赖于思考进行证明时，会通常使用“灵感”或者“直觉”这种不甚明确的东西，这些都是思考的不可预测性所带来的。</p>
<p>在我看来，思考并非没有目的，实际上它有着唯一的目的，这个目的就是死亡。</p>
<p>而思考的“漫无目的”或者是它</p>
<h4 id="b思考与技术的对立b"><b>思考与技术的对立</b></h4>
<p>因为思考相比与技术更接近本质，所以把思考放到和和技术同一层次，将他们看作是一对宿敌是不合适的。实际上就在你思考的时候，也会用到许多用于思考的技术。思考与技术的对立性来自于它自己的用死亡气息的那部分，思考与技术的对立实际上是思考中死亡的气息与技术中生存的气息的对立。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《初等数论》（潘版） 读书笔记]]></title>
        <id>https://i-frush.github.io/post/chu-deng-shu-lun-greatergreater-pan-ban-du-shu-bi-ji/</id>
        <link href="https://i-frush.github.io/post/chu-deng-shu-lun-greatergreater-pan-ban-du-shu-bi-ji/">
        </link>
        <updated>2022-02-18T10:25:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第一章-整除">第一章 整除</h1>
<h2 id="11-自然数和整数">1.1 自然数和整数</h2>
<h3 id="定理">定理</h3>
<p> 
<b>归纳原理  </b> 基于集合论定义了自然数，是数学归纳法的基础，是数论最基础的公理 
</p>
<blockquote>
<p><b>归纳原理</b><br>
设S是N的一个子集，满足条件：（i）1∈S；（ii）如果n∈S，则n+1∈S，那么S=<b><i>N</i></b>.<br>
</br></p>
</blockquote>
<p>
<b>定理1 </b>数学归纳法的基本形式，证明基于归纳原理</br>
</p>
<blockquote>
<p><b>定理1（数学归纳法）</b><br>
设P（n）是关于自然数n的一种性质或命题.如果（i）当n=1时，P（1）成立；（ii）由P（n）成立必可推出P（n+1）成立，那么P（n）对所有自然数n成立.<br>
</br></p>
</blockquote>
<p>
<b>定理2 </b>最小自然数原理，证明基于归结定理(证明不唯一)</br>
</p>
<blockquote>
<p><b>定理2（最小自然数原理） </b><br>
设T是N的一个非空子集.那么，必有t0∈T，使对任意的t∈T有t0≤t，即t0是T中的最小自然数.<br>
</br></p>
</blockquote>
<p>
<b>定理3 </b>最大自然数原理，证明构造所有满足条件的元素集合，结合最小自然数原理证明最小元素必在M中</br>
</p>
<blockquote>
<p><b>定理3（最大自然数原理） </b><br>
设M是N的非空子集.若M有上界，即存在a∈N，使对任意的m∈M有m≤a，那么，必有m0∈M，使对任意的m∈M有m≤m0，即m0是M中的最大自然数.<br>
</br></p>
</blockquote>
<p>
<b>定理4 </b>第二数学归纳法， 证明构造使P不成立的元素集，结合最小自然数原理进行反证
</p>
<blockquote>
<p><b>定理4（第二种数学归纳法） </b><br>
设P（n）是关于自然数n的一种性质或命题.如果（i）当n=1时，P（1）成立；（ii）对n＞1，若对所有的自然数m＜n，P（m）成立，则必可推出P（n）成立，那么P（n）对所有自然数n成立.<br>
</br></p>
</blockquote>
<p>
<b>定理5 </b>鸽巢原理，感觉和前几个原理关系不密切，应该也算是集合论相关的
</p>
<blockquote>
<p><b>定理5（鸽巢原理）</b><br>
（注：亦称为盒子原理或Dirichlet原理.）设n是一个自然数.现有n个盒子和n+1个物体.无论怎样把这n+1个物体放入这n个盒子中，一定有一个盒子中被放了两个或两个以上的物体.<br>
</br></p>
</blockquote>
<h3 id="思考与证明">思考与证明</h3>
<ul>
<li><b>最小自然数原理的证明</b></li>
</ul>
<p>使用反证法可以将证明等价于其他命题</p>
<blockquote>
<p><b>定理2的证明</b><br>
考虑由所有这样的自然数s组成的集合S：对任意的t∈T必有s≤t.由于1满足这样的条件，所以1∈S，S非空.此外，若t1∈T（因T非空所以必有t1），则t1+1＞t1，<b>所以t1+1∉S.由这两点及归纳原理就推出：必有s0∈S使得s0+1∉S（为什么）</b>.我们来证明必有s0∈T.因若不然，则对任意的t∈T必有t＞s0，因而t≥s0+1.这表明s0+1∈S，矛盾.取t0=s0就证明了定理</p>
</blockquote>
<p><b>Q:</b></p>
<blockquote>
<p><b>所以t1+1∉S.由这两点及归纳原理就推出：必有s0∈S使得s0+1∉S（为什么）</b></p>
</blockquote>
<p><b>A:</b></p>
<p>由归结定理，即证S≠N（若所有的s0+1∈S，根据归结定理就可以推出S=N)
由第二点，必有元素t1+1∉S，故S≠N，得证</p>
</br>
<ul>
<li><b>定理2和定理3的等价性</b></li>
</ul>
<p><b>A:</b></p>
<p>书前面已经证明了定理2->定理3. 使用类似的方法可以证定理3->定理2:
设有自然数集T，由于前面说过≤表示顺序关系，而1不为任何自然数的后继，故对于T中任意元素t，有1≤t.
考虑由所有满足m≤t的自然数集合M，由前面的分析，M非空.显然任意t都为M的上界，由定理3，M中有最大元素m0.
假如m0∈T，则对任意的t有m0<t , m0+1≤t，故m0+1∈M，与m0的最大性矛盾.</p>
</br>
<ul>
<li>定理2中没有强调下届，是因为归结定理已经规定了自然数集有下界1. 个人感觉在这里将比较的符号（&gt;,&lt;,≥，≤）感知为元素顺序的标记而非大小更有利于理解.<br>
</br></li>
</ul>
<h3 id="习题选做">习题选做</h3>
<blockquote>
<p>1.设k0是给定的整数，P（n）是关于整数n的一种性质或命题.如果（i）当n=k0时，P（k0）成立；（ii）由P（n）成立可推出P（n+1）成立，那么P（n）对所有整数n≥k0成立.</p>
</blockquote>
<p><b>思路： </b></br>
将定理1的作用范围推广到了所有整数(包括负数)，考虑到与定理1相似的地方：给定的n都有一个起始元素. 通过将n所在的集合与自然数集<b><i>N</i></b>建立映射关系来“化未知为已知”</p>
<p><b>证明： </b></br>
设对于整数m，构造命题Q(m)=P(m+k0-1).</br>
则由条件(i):　Q(1)=P(k0)成立.</br>
由条件(ii):　Q(m)=P(m+k0-1)成立，可推出P(m+k0)=Q(m+1)成立.由定理1，对于所有自然数m ,Q(m)都成立.</br>
即对于所有n>k0 , P(n)都成立.</br>
</p>
</br>
<blockquote>
<p>3.设T是一个由整数组成的集合.若T中有正整数，则T中必有最小正整数.</p>
</blockquote>
<p><b>思路： </b></br>
利用集合的关系，做的时候还怕这种思路不够严谨，结果看答案也是这种思路
</p>
<p><b>证明：</b></br>
设T中所有正整数构成的非空集合为S，则正整数集S为N的非空子集，由定理2，S中存在最小正整数.
由于S为T中所有正整数的集合，故T中存在最小正整数.
</p>
</br>
<blockquote>
<p>［8.1］在一次竞赛中共出了A，B，C三道试题.已知：</p>
<p>（i）在所有参赛学生中共有25人每人至少解出了一道题；（ii）在没有解出A题的学生中，解出B题的人数是解出C题的人数的两倍；（iii）在解出A题的学生中，只解出A题的人数比还解出其他题的人数多一个；（iv）在只解出一道题的学生中，有一半人未解出A题.问：有多少学生只解出了B题？</p>
</blockquote>
<p><b>思路： </b></br>
虽然作者放到了1.1的推荐习题里，但我这道题是用整除的性质做的.</br>
先根据韦恩图设出各未知量，根据题设可列出4个方程.</br>
设做出B和C题的人数为f，化简方程可得到：3|26-f , 9|26-4f.</br>
在f≤25时只有一个可能值，带入方程即可解出只做出B的人数.</br>
</p>
</br>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为git设置代理]]></title>
        <id>https://i-frush.github.io/post/wei-git-she-zhi-dai-li/</id>
        <link href="https://i-frush.github.io/post/wei-git-she-zhi-dai-li/">
        </link>
        <updated>2022-02-17T05:04:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="b起因b"><b>起因</b></h2>
<p>起因就是我发现就算我开着代理工具，git依然经常出现timeout以及其它奇奇怪怪的错误。在排除了SSH配置问题后，我觉得可能是我打开的代理工具没有对git产生影响。</p>
<h2 id="b为什么代理工具没对git起作用b"><b>为什么代理工具没对git起作用？</b></h2>
<p>由于我的技术水平很低，我还没搞清楚这个，这里大概口胡一下。</p>
<p>我所使用的代理工具会有一个本地的客户端监听所用应用的网络请求，将请求加密后发送到代理服务器上，代理服务器上的服务端负责解密以及等等之后的事情。</p>
<p>然后由于某些原因，代理工具并没有收集到git的网络请求，所以需要手动进行git的proxy配置，将请求发送到本机上代理工具监听的端口，实现请求的转发。
</p>
<h2 id="bhttp代理和socks代理b"><b>http代理和socks代理</b></h2>
<p>不懂</p>
<h2 id="bgit-的代理配置b"><b>git 的代理配置</b></h2>
<p>大概这样，端口要设置成自己的代理工具监听的端口。</p>
<pre><code># socks5协议，1080端口修改成自己的本地代理端口
git config –global http.proxy socks5://127.0.0.1:1080
git config –global https.proxy socks5://127.0.0.1:1080
# http协议，1081端口修改成自己的本地代理端口
git config –global http.proxy http://127.0.0.1:1081
git config –global https.proxy https://127.0.0.1:1081
</code></pre>
<p>详见：<a href="https://igghelper.com/helper/?p=152">https://igghelper.com/helper/?p=152</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在永恒之门]]></title>
        <id>https://i-frush.github.io/post/At-Eternitys-Gate/</id>
        <link href="https://i-frush.github.io/post/At-Eternitys-Gate/">
        </link>
        <updated>2022-02-16T14:50:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="在永恒之门">在永恒之门</h1>
<div align = "center">
<img src="../../post-images/1645023563857.jpeg" width = "60%" align=center />
</div>
<blockquote>
<p>　　它没有现实那般美丽而惊人，相比而言这只是一个模糊的镜像，而现实，就好像米勒所相信的那样，昭示著冥冥之中有神灵或永恒的存在。那老人安静地坐在火炉旁的角落里，甚至都不一定知道这一切...这不是什么神学——就算是最穷的樵夫或矿工也总有那么一刹那感觉到永恒之门的存在。</p>
</blockquote>
<p>　　我是在维基百科的某个条目下看到了这幅画，毫无疑问，这幅画中的老兵正沉浸在一种非常悲观、绝望的情绪之中。</p>
<p>　　在今年（2022）的大概是大年初六，下午的天气晴朗，日光以陡峭的角度斜穿过我外公家高高的围墙，在小院子里开拓出一块有光的地界。然后，我看到我看到我的外婆坐在那里晒暖，在柔和的阳光中，在杂乱的物什（之）间，在一个有些脏的塑料椅子上。</p>
<p>　　她的姿势与画中的老人相似，双肘靠在膝盖上，手掌支撑着头。只是她的手放在两颊两侧，眼睛看着地面，我不知道她是否在思考什么。</p>
<p>　　——然后她注意到了我，把头稍稍抬起，用悲伤的眼神望向我。我知道她在巨大的痛苦中，但是我无能为力。</p>
<p> 　　我预感这个场景将会困扰我一辈子。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[死的技术和生的思想]]></title>
        <id>https://i-frush.github.io/post/the-death-of-tech/</id>
        <link href="https://i-frush.github.io/post/the-death-of-tech/">
        </link>
        <updated>2022-02-16T05:18:44.000Z</updated>
    </entry>
</feed>